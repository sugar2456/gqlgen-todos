package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/sugar2456/gqlgen-todos/ent"
	"github.com/sugar2456/gqlgen-todos/ent/user"
	"github.com/sugar2456/gqlgen-todos/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// ユーザーがデータベースに存在するか確認
	u, err := r.Client.User.Query().Where(user.ID(input.UserID)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			// ユーザーが存在しない場合は作成
			u, err = r.Client.User.Create().
				SetID(input.UserID).
				SetName(fmt.Sprintf("ユーザー%s", input.UserID)).
				Save(ctx)
			if err != nil {
				return nil, fmt.Errorf("ユーザーの作成に失敗しました: %w", err)
			}
		} else {
			return nil, fmt.Errorf("ユーザーのクエリに失敗しました: %w", err)
		}
	}

	// 新しいTodoをデータベースに作成
	t, err := r.Client.Todo.Create().
		SetID(uuid.New().String()). // UUIDを使用してユニークなIDを生成
		SetText(input.Text).
		SetDone(false).
		SetUser(u). // ユーザーを関連付け
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("todoの作成に失敗しました: %w", err)
	}

	// EntのTodoエンティティからGraphQLのTodoモデルに変換
	return entTodoToGraphQL(t, u), nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// entクライアントを使ってTodoを取得
	todos, err := r.Client.Todo.Query().
		WithUser(). // ユーザー情報も一緒に取得
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("todoの取得に失敗しました: %w", err)
	}

	// 結果が0件の場合は、サンプルデータを作成
	if len(todos) == 0 {
		// サンプルユーザーを作成
		u, err := r.Client.User.Create().
			SetID("U1").
			SetName("ユーザー1").
			Save(ctx)
		if err != nil {
			return nil, fmt.Errorf("サンプルユーザーの作成に失敗しました: %w", err)
		}

		// サンプルTodoを作成
		_, err = r.Client.Todo.Create().
			SetID("T1").
			SetText("GraphQLの勉強をする").
			SetDone(false).
			SetUser(u).
			Save(ctx)
		if err != nil {
			return nil, fmt.Errorf("サンプルTodoの作成に失敗しました: %w", err)
		}

		_, err = r.Client.Todo.Create().
			SetID("T2").
			SetText("リゾルバーを実装する").
			SetDone(true).
			SetUser(u).
			Save(ctx)
		if err != nil {
			return nil, fmt.Errorf("サンプルTodoの作成に失敗しました: %w", err)
		}

		// 再度Todoを取得
		todos, err = r.Client.Todo.Query().WithUser().All(ctx)
		if err != nil {
			return nil, fmt.Errorf("todoの再取得に失敗しました: %w", err)
		}
	}

	// entのTodoエンティティをGraphQLのTodoモデルに変換
	result := make([]*model.Todo, len(todos))
	for i, t := range todos {
		result[i] = entTodoToGraphQL(t, t.Edges.User)
	}

	return result, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// entクライアントを使ってユーザーを取得
	users, err := r.Client.User.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("ユーザーの取得に失敗しました: %w", err)
	}

	// entのUserエンティティをGraphQLのUserモデルに変換
	result := make([]*model.User, len(users))
	for i, u := range users {
		result[i] = entUserToGraphQL(u)
	}

	return result, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := r.Client.User.Query().Where(user.ID(id)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, fmt.Errorf("ユーザーが見つかりません: %w", err)
		}
		return nil, fmt.Errorf("ユーザーの取得に失敗しました: %w", err)
	}
	// entのUserエンティティをGraphQLのUserモデルに変換
	return entUserToGraphQL(user), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
