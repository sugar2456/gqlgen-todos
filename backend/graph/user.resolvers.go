package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/sugar2456/gqlgen-todos/ent"
	"github.com/sugar2456/gqlgen-todos/ent/user"
	"github.com/sugar2456/gqlgen-todos/graph/model"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// entクライアントを使ってユーザーを取得
	users, err := r.Client.User.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("ユーザーの取得に失敗しました: %w", err)
	}

	// entのUserエンティティをGraphQLのUserモデルに変換
	result := make([]*model.User, len(users))
	for i, u := range users {
		result[i] = entUserToGraphQL(u)
	}

	return result, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := r.Client.User.Query().Where(user.ID(id)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, fmt.Errorf("ユーザーが見つかりません: %w", err)
		}
		return nil, fmt.Errorf("ユーザーの取得に失敗しました: %w", err)
	}
	// entのUserエンティティをGraphQLのUserモデルに変換
	return entUserToGraphQL(user), nil
}
