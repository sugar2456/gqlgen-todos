package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/sugar2456/gqlgen-todos/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := &model.Todo{
		ID:   fmt.Sprintf("T%d", len(r.Resolver.todos)+1),
		Text: input.Text,
		Done: false,
		User: &model.User{
			ID:   input.UserID,
			Name: fmt.Sprintf("ユーザー%s", input.UserID),
		},
	}
	r.Resolver.todos = append(r.Resolver.todos, todo)
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	if len(r.Resolver.todos) == 0 {
		// 初期データとして2件のTodoを追加
		r.Resolver.todos = append(r.Resolver.todos, &model.Todo{
			ID:   "T1",
			Text: "GraphQLの勉強をする",
			Done: false,
			User: &model.User{
				ID:   "U1",
				Name: "ユーザー1",
			},
		})

		r.Resolver.todos = append(r.Resolver.todos, &model.Todo{
			ID:   "T2",
			Text: "リゾルバーを実装する",
			Done: true,
			User: &model.User{
				ID:   "U1",
				Name: "ユーザー1",
			},
		})
	}

	return r.Resolver.todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
